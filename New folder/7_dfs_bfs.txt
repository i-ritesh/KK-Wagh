#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>

#define MAX_VERTICES 10

// Structure to represent a node in the adjacency list
typedef struct Node {
    int vertex;
    struct Node *next;
} Node;

// Structure to represent a graph
typedef struct Graph {
    int numVertices;
    Node *adjLists[MAX_VERTICES];
    bool visited[MAX_VERTICES];
} Graph;

// Queue structure for BFS
typedef struct Queue {
    int items[MAX_VERTICES];
    int front;
    int rear;
} Queue;

// Create a node
Node *createNode(int vertex) {
    Node *newNode = (Node *)malloc(sizeof(Node));
    newNode->vertex = vertex;
    newNode->next = NULL;
    return newNode;
}

// Initialize the graph
Graph *createGraph(int vertices) {
    Graph *graph = (Graph *)malloc(sizeof(Graph));
    graph->numVertices = vertices;

    for (int i = 0; i < vertices; i++) {
        graph->adjLists[i] = NULL;
        graph->visited[i] = false;
    }
    return graph;
}

// Add an edge
void addEdge(Graph *graph, int src, int dest) {
    // Add edge from src to dest
    Node *newNode = createNode(dest);
    newNode->next = graph->adjLists[src];
    graph->adjLists[src] = newNode;

    // Add edge from dest to src (if undirected graph)
    newNode = createNode(src);
    newNode->next = graph->adjLists[dest];
    graph->adjLists[dest] = newNode;
}

// Print the graph
void printGraph(Graph *graph) {
    for (int v = 0; v < graph->numVertices; v++) {
        Node *temp = graph->adjLists[v];
        printf("Vertex %d:\n", v);
        while (temp) {
            printf(" -> %d", temp->vertex);
            temp = temp->next;
        }
        printf("\n");
    }
}

// Depth First Search (DFS)
void DFS(Graph *graph, int vertex) {
    graph->visited[vertex] = true;
    printf("Visited %d\n", vertex);

    Node *adjList = graph->adjLists[vertex];
    Node *temp = adjList;

    while (temp != NULL) {
        int connectedVertex = temp->vertex;

        if (!graph->visited[connectedVertex]) {
            DFS(graph, connectedVertex);
        }
        temp = temp->next;
    }
}

// Initialize the queue
Queue *createQueue() {
    Queue *q = (Queue *)malloc(sizeof(Queue));
    q->front = -1;
    q->rear = -1;
    return q;
}

// Check if the queue is empty
bool isEmpty(Queue *q) {
    return q->rear == -1;
}

// Enqueue
void enqueue(Queue *q, int value) {
    if (q->rear == MAX_VERTICES - 1) {
        printf("Queue is full\n");
        return;
    } else {
        if (q->front == -1)
            q->front = 0;
        q->rear++;
        q->items[q->rear] = value;
    }
}

// Dequeue
int dequeue(Queue *q) {
    int item;
    if (isEmpty(q)) {
        printf("Queue is empty\n");
        return -1;
    } else {
        item = q->items[q->front];
        q->front++;
        if (q->front > q->rear) {
            q->front = q->rear = -1;
        }
    }
    return item;
}

// Breadth First Search (BFS)
void BFS(Graph *graph, int startVertex) {
    Queue *q = createQueue();

    graph->visited[startVertex] = true;
    enqueue(q, startVertex);

    while (!isEmpty(q)) {
        int currentVertex = dequeue(q);
        printf("Visited %d\n", currentVertex);

        Node *temp = graph->adjLists[currentVertex];

        while (temp) {
            int adjVertex = temp->vertex;

            if (!graph->visited[adjVertex]) {
                graph->visited[adjVertex] = true;
                enqueue(q, adjVertex);
            }
            temp = temp->next;
        }
    }
}

int main() {
    int vertices = 6;
    Graph *graph = createGraph(vertices);

    // Example map connections
    addEdge(graph, 0, 1);
    addEdge(graph, 0, 2);
    addEdge(graph, 1, 3);
    addEdge(graph, 1, 4);
    addEdge(graph, 2, 5);

    printf("Graph representation:\n");
    printGraph(graph);

    printf("\nDFS Traversal:\n");
    DFS(graph, 0);

    // Reset visited array for BFS
    for (int i = 0; i < vertices; i++) {
        graph->visited[i] = false;
    }

    printf("\nBFS Traversal:\n");
    BFS(graph, 0);

    return 0;
}
